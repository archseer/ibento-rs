%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.2
-module(ibento_ibento_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_google.protobuf.NullValue'/1, 'enum_value_by_symbol_google.protobuf.NullValue'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([descriptor/0, descriptor/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'google.protobuf.NullValue'() :: 'NULL_VALUE'.
-export_type(['google.protobuf.NullValue'/0]).

%% message types
-type subscribe_request() ::
      #{topics                  => [iodata()]       % = 1
       }.

-type replay_request() ::
      #{topics                  => [iodata()],      % = 1
        'after'                 => non_neg_integer(), % = 2, 32 bits
        limit                   => non_neg_integer() % = 3, 32 bits
       }.

-type event() ::
      #{event_id                => iodata(),        % = 1
        type                    => iodata(),        % = 2
        correlation             => iodata(),        % = 3
        causation               => iodata(),        % = 4
        data                    => value(),         % = 5
        metadata                => value(),         % = 6
        debug                   => boolean() | 0 | 1, % = 7
        inserted_at             => timestamp(),     % = 8
        ingest_id               => iodata()         % = 9
       }.

-type struct() ::
      #{fields                  => #{iodata() := value()} % = 1
       }.

-type value() ::
      #{kind                    => {null_value, 'NULL_VALUE' | integer()} | {number_value, float() | integer() | infinity | '-infinity' | nan} | {string_value, iodata()} | {bool_value, boolean() | 0 | 1} | {struct_value, struct()} | {list_value, list_value()} % oneof
       }.

-type list_value() ::
      #{values                  => [value()]        % = 1
       }.

-type timestamp() ::
      #{seconds                 => integer(),       % = 1, 32 bits
        nanos                   => integer()        % = 2, 32 bits
       }.

-export_type(['subscribe_request'/0, 'replay_request'/0, 'event'/0, 'struct'/0, 'value'/0, 'list_value'/0, 'timestamp'/0]).

-spec encode_msg(subscribe_request() | replay_request() | event() | struct() | value() | list_value() | timestamp(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(subscribe_request() | replay_request() | event() | struct() | value() | list_value() | timestamp(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      subscribe_request ->
	  encode_msg_subscribe_request(id(Msg, TrUserData),
				       TrUserData);
      replay_request ->
	  encode_msg_replay_request(id(Msg, TrUserData),
				    TrUserData);
      event ->
	  encode_msg_event(id(Msg, TrUserData), TrUserData);
      struct ->
	  encode_msg_struct(id(Msg, TrUserData), TrUserData);
      value ->
	  encode_msg_value(id(Msg, TrUserData), TrUserData);
      list_value ->
	  encode_msg_list_value(id(Msg, TrUserData), TrUserData);
      timestamp ->
	  encode_msg_timestamp(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_subscribe_request(Msg, TrUserData) ->
    encode_msg_subscribe_request(Msg, <<>>, TrUserData).


encode_msg_subscribe_request(#{} = M, Bin,
			     TrUserData) ->
    case M of
      #{topics := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true ->
		 e_field_subscribe_request_topics(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_replay_request(Msg, TrUserData) ->
    encode_msg_replay_request(Msg, <<>>, TrUserData).


encode_msg_replay_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{topics := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_replay_request_topics(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{'after' := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{limit := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 0 -> B2;
	       true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_event(Msg, TrUserData) ->
    encode_msg_event(Msg, <<>>, TrUserData).


encode_msg_event(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{event_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{type := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{correlation := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case is_empty_string(TrF3) of
		   true -> B2;
		   false ->
		       e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{causation := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 case is_empty_string(TrF4) of
		   true -> B3;
		   false ->
		       e_type_string(TrF4, <<B3/binary, 34>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{data := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= undefined -> B4;
		    true ->
			e_mfield_event_data(TrF5, <<B4/binary, 42>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{metadata := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= undefined -> B5;
		    true ->
			e_mfield_event_metadata(TrF6, <<B5/binary, 50>>,
						TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{debug := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 if TrF7 =:= false -> B6;
		    true -> e_type_bool(TrF7, <<B6/binary, 56>>, TrUserData)
		 end
	       end;
	   _ -> B6
	 end,
    B8 = case M of
	   #{inserted_at := F8} ->
	       begin
		 TrF8 = id(F8, TrUserData),
		 if TrF8 =:= undefined -> B7;
		    true ->
			e_mfield_event_inserted_at(TrF8, <<B7/binary, 66>>,
						   TrUserData)
		 end
	       end;
	   _ -> B7
	 end,
    case M of
      #{ingest_id := F9} ->
	  begin
	    TrF9 = id(F9, TrUserData),
	    case is_empty_string(TrF9) of
	      true -> B8;
	      false ->
		  e_type_string(TrF9, <<B8/binary, 74>>, TrUserData)
	    end
	  end;
      _ -> B8
    end.

encode_msg_struct(Msg, TrUserData) ->
    encode_msg_struct(Msg, <<>>, TrUserData).


encode_msg_struct(#{} = M, Bin, TrUserData) ->
    case M of
      #{fields := F1} ->
	  TrF1 = 'tr_encode_struct.fields'(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true -> e_field_struct_fields(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_value(Msg, TrUserData) ->
    encode_msg_value(Msg, <<>>, TrUserData).


encode_msg_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{kind := F1} ->
	  case id(F1, TrUserData) of
	    {null_value, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  'e_enum_google.protobuf.NullValue'(TrTF1,
						     <<Bin/binary, 8>>,
						     TrUserData)
		end;
	    {number_value, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_double(TrTF1, <<Bin/binary, 17>>, TrUserData)
		end;
	    {string_value, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_string(TrTF1, <<Bin/binary, 26>>, TrUserData)
		end;
	    {bool_value, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_bool(TrTF1, <<Bin/binary, 32>>, TrUserData)
		end;
	    {struct_value, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_value_struct_value(TrTF1, <<Bin/binary, 42>>,
					      TrUserData)
		end;
	    {list_value, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_value_list_value(TrTF1, <<Bin/binary, 50>>,
					    TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_list_value(Msg, TrUserData) ->
    encode_msg_list_value(Msg, <<>>, TrUserData).


encode_msg_list_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{values := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true -> e_field_list_value_values(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_timestamp(Msg, TrUserData) ->
    encode_msg_timestamp(Msg, <<>>, TrUserData).


encode_msg_timestamp(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{seconds := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{nanos := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

e_field_subscribe_request_topics([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_subscribe_request_topics(Rest, Bin3,
				     TrUserData);
e_field_subscribe_request_topics([], Bin,
				 _TrUserData) ->
    Bin.

e_field_replay_request_topics([Elem | Rest], Bin,
			      TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_type_string(id(Elem, TrUserData), Bin2,
			 TrUserData),
    e_field_replay_request_topics(Rest, Bin3, TrUserData);
e_field_replay_request_topics([], Bin, _TrUserData) ->
    Bin.

e_mfield_event_data(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_event_metadata(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_event_inserted_at(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_struct_fields(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,value>'(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_struct_fields([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_struct_fields('tr_encode_struct.fields[x]'(Elem,
							    TrUserData),
			       Bin2, TrUserData),
    e_field_struct_fields(Rest, Bin3, TrUserData);
e_field_struct_fields([], Bin, _TrUserData) -> Bin.

e_mfield_value_struct_value(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_struct(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_value_list_value(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_list_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_list_value_values(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_list_value_values([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_list_value_values(id(Elem, TrUserData),
				      Bin2, TrUserData),
    e_field_list_value_values(Rest, Bin3, TrUserData);
e_field_list_value_values([], Bin, _TrUserData) -> Bin.

'encode_msg_map<string,value>'(#{key := F1,
				 value := F2},
			       Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_mfield_map<string,value>_value'(TrF2,
					 <<B1/binary, 18>>, TrUserData)
    end.

'e_mfield_map<string,value>_value'(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_google.protobuf.NullValue'('NULL_VALUE', Bin,
				   _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_google.protobuf.NullValue'(V, Bin,
				   _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(subscribe_request, Bin, TrUserData) ->
    id(decode_msg_subscribe_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(replay_request, Bin, TrUserData) ->
    id(decode_msg_replay_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(event, Bin, TrUserData) ->
    id(decode_msg_event(Bin, TrUserData), TrUserData);
decode_msg_2_doit(struct, Bin, TrUserData) ->
    id(decode_msg_struct(Bin, TrUserData), TrUserData);
decode_msg_2_doit(value, Bin, TrUserData) ->
    id(decode_msg_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(list_value, Bin, TrUserData) ->
    id(decode_msg_list_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(timestamp, Bin, TrUserData) ->
    id(decode_msg_timestamp(Bin, TrUserData), TrUserData).



decode_msg_subscribe_request(Bin, TrUserData) ->
    dfp_read_field_def_subscribe_request(Bin, 0, 0,
					 id([], TrUserData), TrUserData).

dfp_read_field_def_subscribe_request(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_subscribe_request_topics(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_subscribe_request(<<>>, 0, 0, R1,
				     TrUserData) ->
    #{topics => lists_reverse(R1, TrUserData)};
dfp_read_field_def_subscribe_request(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_subscribe_request(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_subscribe_request(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_subscribe_request(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_subscribe_request(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_subscribe_request_topics(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_subscribe_request(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_subscribe_request(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_subscribe_request(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_subscribe_request(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_subscribe_request(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_subscribe_request(<<>>, 0, 0, R1,
				    TrUserData) ->
    #{topics => lists_reverse(R1, TrUserData)}.

d_field_subscribe_request_topics(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_subscribe_request_topics(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_subscribe_request_topics(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_subscribe_request(RestF, 0, 0,
					 cons(NewFValue, Prev, TrUserData),
					 TrUserData).

skip_varint_subscribe_request(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_subscribe_request(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_subscribe_request(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_subscribe_request(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_subscribe_request(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_subscribe_request(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_subscribe_request(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_subscribe_request(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_subscribe_request(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_subscribe_request(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_subscribe_request(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_subscribe_request(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_subscribe_request(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_subscribe_request(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_replay_request(Bin, TrUserData) ->
    dfp_read_field_def_replay_request(Bin, 0, 0,
				      id([], TrUserData), id(0, TrUserData),
				      id(0, TrUserData), TrUserData).

dfp_read_field_def_replay_request(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_replay_request_topics(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_replay_request(<<16, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_replay_request_after(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_replay_request(<<24, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_replay_request_limit(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_replay_request(<<>>, 0, 0, R1, F@_2,
				  F@_3, TrUserData) ->
    #{topics => lists_reverse(R1, TrUserData),
      'after' => F@_2, limit => F@_3};
dfp_read_field_def_replay_request(Other, Z1, Z2, F@_1,
				  F@_2, F@_3, TrUserData) ->
    dg_read_field_def_replay_request(Other, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

dg_read_field_def_replay_request(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_replay_request(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
dg_read_field_def_replay_request(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_replay_request_topics(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      16 ->
	  d_field_replay_request_after(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      24 ->
	  d_field_replay_request_limit(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_replay_request(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    1 ->
		skip_64_replay_request(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData);
	    2 ->
		skip_length_delimited_replay_request(Rest, 0, 0, F@_1,
						     F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_replay_request(Rest, Key bsr 3, 0, F@_1,
					  F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_replay_request(Rest, 0, 0, F@_1, F@_2, F@_3,
				       TrUserData)
	  end
    end;
dg_read_field_def_replay_request(<<>>, 0, 0, R1, F@_2,
				 F@_3, TrUserData) ->
    #{topics => lists_reverse(R1, TrUserData),
      'after' => F@_2, limit => F@_3}.

d_field_replay_request_topics(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_replay_request_topics(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_replay_request_topics(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_replay_request(RestF, 0, 0,
				      cons(NewFValue, Prev, TrUserData), F@_2,
				      F@_3, TrUserData).

d_field_replay_request_after(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_replay_request_after(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_replay_request_after(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_replay_request(RestF, 0, 0, F@_1,
				      NewFValue, F@_3, TrUserData).

d_field_replay_request_limit(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_replay_request_limit(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_replay_request_limit(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_replay_request(RestF, 0, 0, F@_1,
				      F@_2, NewFValue, TrUserData).

skip_varint_replay_request(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_replay_request(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
skip_varint_replay_request(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_replay_request(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_length_delimited_replay_request(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_replay_request(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
skip_length_delimited_replay_request(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_replay_request(Rest2, 0, 0, F@_1,
				      F@_2, F@_3, TrUserData).

skip_group_replay_request(Bin, FNum, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_replay_request(Rest, 0, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_32_replay_request(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_replay_request(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

skip_64_replay_request(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_replay_request(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, TrUserData).

decode_msg_event(Bin, TrUserData) ->
    dfp_read_field_def_event(Bin, 0, 0,
			     id(<<>>, TrUserData), id(<<>>, TrUserData),
			     id(<<>>, TrUserData), id(<<>>, TrUserData),
			     id('$undef', TrUserData), id('$undef', TrUserData),
			     id(false, TrUserData), id('$undef', TrUserData),
			     id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_event(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    d_field_event_event_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_event(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    d_field_event_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_event(<<26, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    d_field_event_correlation(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      TrUserData);
dfp_read_field_def_event(<<34, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    d_field_event_causation(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_event(<<42, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    d_field_event_data(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_event(<<50, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    d_field_event_metadata(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_event(<<56, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    d_field_event_debug(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_event(<<66, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    d_field_event_inserted_at(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			      TrUserData);
dfp_read_field_def_event(<<74, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    d_field_event_ingest_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
dfp_read_field_def_event(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _) ->
    S1 = #{event_id => F@_1, type => F@_2,
	   correlation => F@_3, causation => F@_4, debug => F@_7,
	   ingest_id => F@_9},
    S2 = if F@_5 == '$undef' -> S1;
	    true -> S1#{data => F@_5}
	 end,
    S3 = if F@_6 == '$undef' -> S2;
	    true -> S2#{metadata => F@_6}
	 end,
    if F@_8 == '$undef' -> S3;
       true -> S3#{inserted_at => F@_8}
    end;
dfp_read_field_def_event(Other, Z1, Z2, F@_1, F@_2,
			 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			 TrUserData) ->
    dg_read_field_def_event(Other, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

dg_read_field_def_event(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_event(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, TrUserData);
dg_read_field_def_event(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_event_event_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 TrUserData);
      18 ->
	  d_field_event_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
      26 ->
	  d_field_event_correlation(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    TrUserData);
      34 ->
	  d_field_event_causation(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData);
      42 ->
	  d_field_event_data(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
      50 ->
	  d_field_event_metadata(Rest, 0, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 TrUserData);
      56 ->
	  d_field_event_debug(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
      66 ->
	  d_field_event_inserted_at(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				    TrUserData);
      74 ->
	  d_field_event_ingest_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_event(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				  F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
	    1 ->
		skip_64_event(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, F@_7, F@_8, F@_9, TrUserData);
	    2 ->
		skip_length_delimited_event(Rest, 0, 0, F@_1, F@_2,
					    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					    F@_9, TrUserData);
	    3 ->
		skip_group_event(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				 TrUserData);
	    5 ->
		skip_32_event(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			      F@_6, F@_7, F@_8, F@_9, TrUserData)
	  end
    end;
dg_read_field_def_event(<<>>, 0, 0, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, _) ->
    S1 = #{event_id => F@_1, type => F@_2,
	   correlation => F@_3, causation => F@_4, debug => F@_7,
	   ingest_id => F@_9},
    S2 = if F@_5 == '$undef' -> S1;
	    true -> S1#{data => F@_5}
	 end,
    S3 = if F@_6 == '$undef' -> S2;
	    true -> S2#{metadata => F@_6}
	 end,
    if F@_8 == '$undef' -> S3;
       true -> S3#{inserted_at => F@_8}
    end.

d_field_event_event_id(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, TrUserData)
    when N < 57 ->
    d_field_event_event_id(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData);
d_field_event_event_id(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_event(RestF, 0, 0, NewFValue, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			     TrUserData).

d_field_event_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   TrUserData)
    when N < 57 ->
    d_field_event_type(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		       TrUserData);
d_field_event_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_event(RestF, 0, 0, F@_1, NewFValue,
			     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			     TrUserData).

d_field_event_correlation(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData)
    when N < 57 ->
    d_field_event_correlation(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, TrUserData);
d_field_event_correlation(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_event(RestF, 0, 0, F@_1, F@_2,
			     NewFValue, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			     TrUserData).

d_field_event_causation(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, TrUserData)
    when N < 57 ->
    d_field_event_causation(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, TrUserData);
d_field_event_causation(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8, F@_9,
			TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_event(RestF, 0, 0, F@_1, F@_2, F@_3,
			     NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9,
			     TrUserData).

d_field_event_data(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   TrUserData)
    when N < 57 ->
    d_field_event_data(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		       TrUserData);
d_field_event_data(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8, F@_9,
		   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_value(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_event(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4,
			     if Prev == '$undef' -> NewFValue;
				true ->
				    merge_msg_value(Prev, NewFValue, TrUserData)
			     end,
			     F@_6, F@_7, F@_8, F@_9, TrUserData).

d_field_event_metadata(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, TrUserData)
    when N < 57 ->
    d_field_event_metadata(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   TrUserData);
d_field_event_metadata(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev, F@_7, F@_8,
		       F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_value(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_event(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5,
			     if Prev == '$undef' -> NewFValue;
				true ->
				    merge_msg_value(Prev, NewFValue, TrUserData)
			     end,
			     F@_7, F@_8, F@_9, TrUserData).

d_field_event_debug(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    TrUserData)
    when N < 57 ->
    d_field_event_debug(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			TrUserData);
d_field_event_debug(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, _, F@_8, F@_9,
		    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_event(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, NewFValue, F@_8, F@_9,
			     TrUserData).

d_field_event_inserted_at(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			  F@_9, TrUserData)
    when N < 57 ->
    d_field_event_inserted_at(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			      F@_9, TrUserData);
d_field_event_inserted_at(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev,
			  F@_9, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_event(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7,
			     if Prev == '$undef' -> NewFValue;
				true ->
				    merge_msg_timestamp(Prev, NewFValue,
							TrUserData)
			     end,
			     F@_9, TrUserData).

d_field_event_ingest_id(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, TrUserData)
    when N < 57 ->
    d_field_event_ingest_id(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, TrUserData);
d_field_event_ingest_id(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, _,
			TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_event(RestF, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, NewFValue,
			     TrUserData).

skip_varint_event(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		  TrUserData) ->
    skip_varint_event(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData);
skip_varint_event(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		  TrUserData) ->
    dfp_read_field_def_event(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

skip_length_delimited_event(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, TrUserData)
    when N < 57 ->
    skip_length_delimited_event(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, TrUserData);
skip_length_delimited_event(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_event(Rest2, 0, 0, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

skip_group_event(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		 F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_event(Rest, 0, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

skip_32_event(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    dfp_read_field_def_event(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

skip_64_event(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData) ->
    dfp_read_field_def_event(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, TrUserData).

decode_msg_struct(Bin, TrUserData) ->
    dfp_read_field_def_struct(Bin, 0, 0,
			      'tr_decode_init_default_struct.fields'([],
								     TrUserData),
			      TrUserData).

dfp_read_field_def_struct(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    d_field_struct_fields(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_struct(<<>>, 0, 0, R1, TrUserData) ->
    #{fields =>
	  'tr_decode_repeated_finalize_struct.fields'(R1,
						      TrUserData)};
dfp_read_field_def_struct(Other, Z1, Z2, F@_1,
			  TrUserData) ->
    dg_read_field_def_struct(Other, Z1, Z2, F@_1,
			     TrUserData).

dg_read_field_def_struct(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_struct(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
dg_read_field_def_struct(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_struct_fields(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_struct(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_struct(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_struct(Rest, 0, 0, F@_1,
					     TrUserData);
	    3 ->
		skip_group_struct(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_struct(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_struct(<<>>, 0, 0, R1, TrUserData) ->
    #{fields =>
	  'tr_decode_repeated_finalize_struct.fields'(R1,
						      TrUserData)}.

d_field_struct_fields(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, TrUserData)
    when N < 57 ->
    d_field_struct_fields(Rest, N + 7, X bsl N + Acc, F@_1,
			  TrUserData);
d_field_struct_fields(<<0:1, X:7, Rest/binary>>, N, Acc,
		      Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,value>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_struct(RestF, 0, 0,
			      'tr_decode_repeated_add_elem_struct.fields'(NewFValue,
									  Prev,
									  TrUserData),
			      TrUserData).

skip_varint_struct(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, TrUserData) ->
    skip_varint_struct(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_struct(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, TrUserData) ->
    dfp_read_field_def_struct(Rest, Z1, Z2, F@_1,
			      TrUserData).

skip_length_delimited_struct(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_struct(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
skip_length_delimited_struct(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_struct(Rest2, 0, 0, F@_1,
			      TrUserData).

skip_group_struct(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_struct(Rest, 0, Z2, F@_1,
			      TrUserData).

skip_32_struct(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       TrUserData) ->
    dfp_read_field_def_struct(Rest, Z1, Z2, F@_1,
			      TrUserData).

skip_64_struct(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       TrUserData) ->
    dfp_read_field_def_struct(Rest, Z1, Z2, F@_1,
			      TrUserData).

decode_msg_value(Bin, TrUserData) ->
    dfp_read_field_def_value(Bin, 0, 0,
			     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_value(<<8, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_value_null_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_value(<<17, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_value_number_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_value(<<26, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_value_string_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_value(<<32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_value_bool_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_value(<<42, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_value_struct_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_value(<<50, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    d_field_value_list_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_value(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{kind => F@_1}
    end;
dfp_read_field_def_value(Other, Z1, Z2, F@_1,
			 TrUserData) ->
    dg_read_field_def_value(Other, Z1, Z2, F@_1,
			    TrUserData).

dg_read_field_def_value(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_value(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
dg_read_field_def_value(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_value_null_value(Rest, 0, 0, F@_1, TrUserData);
      17 ->
	  d_field_value_number_value(Rest, 0, 0, F@_1,
				     TrUserData);
      26 ->
	  d_field_value_string_value(Rest, 0, 0, F@_1,
				     TrUserData);
      32 ->
	  d_field_value_bool_value(Rest, 0, 0, F@_1, TrUserData);
      42 ->
	  d_field_value_struct_value(Rest, 0, 0, F@_1,
				     TrUserData);
      50 ->
	  d_field_value_list_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_value(Rest, 0, 0, F@_1,
					    TrUserData);
	    3 ->
		skip_group_value(Rest, Key bsr 3, 0, F@_1, TrUserData);
	    5 -> skip_32_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_value(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{kind => F@_1}
    end.

d_field_value_null_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_value_null_value(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_value_null_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_google.protobuf.NullValue'(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_value(RestF, 0, 0,
			     id({null_value, NewFValue}, TrUserData),
			     TrUserData).

d_field_value_number_value(<<0:48, 240, 127,
			     Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_value(Rest, Z1, Z2,
			     id({number_value, id(infinity, TrUserData)},
				TrUserData),
			     TrUserData);
d_field_value_number_value(<<0:48, 240, 255,
			     Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_value(Rest, Z1, Z2,
			     id({number_value, id('-infinity', TrUserData)},
				TrUserData),
			     TrUserData);
d_field_value_number_value(<<_:48, 15:4, _:4, _:1,
			     127:7, Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_value(Rest, Z1, Z2,
			     id({number_value, id(nan, TrUserData)},
				TrUserData),
			     TrUserData);
d_field_value_number_value(<<Value:64/little-float,
			     Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_value(Rest, Z1, Z2,
			     id({number_value, id(Value, TrUserData)},
				TrUserData),
			     TrUserData).

d_field_value_string_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_value_string_value(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_value_string_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_value(RestF, 0, 0,
			     id({string_value, NewFValue}, TrUserData),
			     TrUserData).

d_field_value_bool_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_value_bool_value(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_value_bool_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_value(RestF, 0, 0,
			     id({bool_value, NewFValue}, TrUserData),
			     TrUserData).

d_field_value_struct_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_value_struct_value(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_value_struct_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_struct(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_value(RestF, 0, 0,
			     case Prev of
			       '$undef' ->
				   id({struct_value, NewFValue}, TrUserData);
			       {struct_value, MVPrev} ->
				   id({struct_value,
				       merge_msg_struct(MVPrev, NewFValue,
							TrUserData)},
				      TrUserData);
			       _ -> id({struct_value, NewFValue}, TrUserData)
			     end,
			     TrUserData).

d_field_value_list_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_value_list_value(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_value_list_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_list_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_value(RestF, 0, 0,
			     case Prev of
			       '$undef' ->
				   id({list_value, NewFValue}, TrUserData);
			       {list_value, MVPrev} ->
				   id({list_value,
				       merge_msg_list_value(MVPrev, NewFValue,
							    TrUserData)},
				      TrUserData);
			       _ -> id({list_value, NewFValue}, TrUserData)
			     end,
			     TrUserData).

skip_varint_value(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, TrUserData) ->
    skip_varint_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_value(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, TrUserData) ->
    dfp_read_field_def_value(Rest, Z1, Z2, F@_1,
			     TrUserData).

skip_length_delimited_value(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_value(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
skip_length_delimited_value(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_value(Rest2, 0, 0, F@_1, TrUserData).

skip_group_value(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_value(Rest, 0, Z2, F@_1, TrUserData).

skip_32_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	      TrUserData) ->
    dfp_read_field_def_value(Rest, Z1, Z2, F@_1,
			     TrUserData).

skip_64_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	      TrUserData) ->
    dfp_read_field_def_value(Rest, Z1, Z2, F@_1,
			     TrUserData).

decode_msg_list_value(Bin, TrUserData) ->
    dfp_read_field_def_list_value(Bin, 0, 0,
				  id([], TrUserData), TrUserData).

dfp_read_field_def_list_value(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_list_value_values(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_list_value(<<>>, 0, 0, R1,
			      TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{values => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_list_value(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_list_value(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_list_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_list_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_list_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_list_value_values(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_list_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_list_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_list_value(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_list_value(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_list_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_list_value(<<>>, 0, 0, R1,
			     TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{values => lists_reverse(R1, TrUserData)}
    end.

d_field_list_value_values(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_list_value_values(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_list_value_values(<<0:1, X:7, Rest/binary>>, N,
			  Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_value(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_list_value(RestF, 0, 0,
				  cons(NewFValue, Prev, TrUserData),
				  TrUserData).

skip_varint_list_value(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_list_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_list_value(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_list_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_list_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_list_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_list_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_list_value(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_list_value(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_list_value(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_list_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_list_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_list_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_list_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_timestamp(Bin, TrUserData) ->
    dfp_read_field_def_timestamp(Bin, 0, 0,
				 id(0, TrUserData), id(0, TrUserData),
				 TrUserData).

dfp_read_field_def_timestamp(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, TrUserData) ->
    d_field_timestamp_seconds(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_timestamp(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_timestamp_nanos(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_timestamp(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #{seconds => F@_1, nanos => F@_2};
dfp_read_field_def_timestamp(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_timestamp(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_timestamp(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_timestamp(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_timestamp(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_timestamp_seconds(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_timestamp_nanos(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_timestamp(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_timestamp(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_timestamp(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_timestamp(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_timestamp(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_timestamp(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #{seconds => F@_1, nanos => F@_2}.

d_field_timestamp_seconds(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_seconds(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_timestamp_seconds(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_timestamp(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_timestamp_nanos(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_nanos(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_timestamp_nanos(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_timestamp(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_timestamp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_timestamp(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_timestamp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_timestamp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_timestamp(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_timestamp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_timestamp(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_timestamp(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_timestamp(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_timestamp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_timestamp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

'decode_msg_map<string,value>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,value>'(Bin, 0, 0,
					   id(<<>>, TrUserData),
					   id('$undef', TrUserData),
					   TrUserData).

'dfp_read_field_def_map<string,value>'(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,value>_key'(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
'dfp_read_field_def_map<string,value>'(<<18,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,value>_value'(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
'dfp_read_field_def_map<string,value>'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
'dfp_read_field_def_map<string,value>'(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,value>'(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,value>'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,value>'(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
'dg_read_field_def_map<string,value>'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,value>_key'(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      18 ->
	  'd_field_map<string,value>_value'(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,value>'(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		'skip_64_map<string,value>'(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		'skip_length_delimited_map<string,value>'(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		'skip_group_map<string,value>'(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,value>'(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
'dg_read_field_def_map<string,value>'(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

'd_field_map<string,value>_key'(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,value>_key'(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,value>_key'(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_map<string,value>'(RestF, 0, 0,
					   NewFValue, F@_2, TrUserData).

'd_field_map<string,value>_value'(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,value>_value'(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,value>_value'(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_value(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,value>'(RestF, 0, 0,
					   F@_1,
					   if Prev == '$undef' -> NewFValue;
					      true ->
						  merge_msg_value(Prev,
								  NewFValue,
								  TrUserData)
					   end,
					   TrUserData).

'skip_varint_map<string,value>'(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,value>'(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
'skip_varint_map<string,value>'(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,value>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,value>'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,value>'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
'skip_length_delimited_map<string,value>'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,value>'(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

'skip_group_map<string,value>'(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,value>'(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

'skip_32_map<string,value>'(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,value>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'skip_64_map<string,value>'(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,value>'(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'd_enum_google.protobuf.NullValue'(0) -> 'NULL_VALUE';
'd_enum_google.protobuf.NullValue'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      subscribe_request ->
	  merge_msg_subscribe_request(Prev, New, TrUserData);
      replay_request ->
	  merge_msg_replay_request(Prev, New, TrUserData);
      event -> merge_msg_event(Prev, New, TrUserData);
      struct -> merge_msg_struct(Prev, New, TrUserData);
      value -> merge_msg_value(Prev, New, TrUserData);
      list_value ->
	  merge_msg_list_value(Prev, New, TrUserData);
      timestamp -> merge_msg_timestamp(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_subscribe_request/3}).
merge_msg_subscribe_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{topics := PFtopics}, #{topics := NFtopics}} ->
	  S1#{topics =>
		  'erlang_++'(PFtopics, NFtopics, TrUserData)};
      {_, #{topics := NFtopics}} -> S1#{topics => NFtopics};
      {#{topics := PFtopics}, _} -> S1#{topics => PFtopics};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_replay_request/3}).
merge_msg_replay_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{topics := PFtopics}, #{topics := NFtopics}} ->
	       S1#{topics =>
		       'erlang_++'(PFtopics, NFtopics, TrUserData)};
	   {_, #{topics := NFtopics}} -> S1#{topics => NFtopics};
	   {#{topics := PFtopics}, _} -> S1#{topics => PFtopics};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{'after' := NFafter}} -> S2#{'after' => NFafter};
	   {#{'after' := PFafter}, _} -> S2#{'after' => PFafter};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{limit := NFlimit}} -> S3#{limit => NFlimit};
      {#{limit := PFlimit}, _} -> S3#{limit => PFlimit};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_event/3}).
merge_msg_event(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{event_id := NFevent_id}} ->
	       S1#{event_id => NFevent_id};
	   {#{event_id := PFevent_id}, _} ->
	       S1#{event_id => PFevent_id};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S2#{type => NFtype};
	   {#{type := PFtype}, _} -> S2#{type => PFtype};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{correlation := NFcorrelation}} ->
	       S3#{correlation => NFcorrelation};
	   {#{correlation := PFcorrelation}, _} ->
	       S3#{correlation => PFcorrelation};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{causation := NFcausation}} ->
	       S4#{causation => NFcausation};
	   {#{causation := PFcausation}, _} ->
	       S4#{causation => PFcausation};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {#{data := PFdata}, #{data := NFdata}} ->
	       S5#{data =>
		       merge_msg_value(PFdata, NFdata, TrUserData)};
	   {_, #{data := NFdata}} -> S5#{data => NFdata};
	   {#{data := PFdata}, _} -> S5#{data => PFdata};
	   {_, _} -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {#{metadata := PFmetadata},
	    #{metadata := NFmetadata}} ->
	       S6#{metadata =>
		       merge_msg_value(PFmetadata, NFmetadata, TrUserData)};
	   {_, #{metadata := NFmetadata}} ->
	       S6#{metadata => NFmetadata};
	   {#{metadata := PFmetadata}, _} ->
	       S6#{metadata => PFmetadata};
	   {_, _} -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {_, #{debug := NFdebug}} -> S7#{debug => NFdebug};
	   {#{debug := PFdebug}, _} -> S7#{debug => PFdebug};
	   _ -> S7
	 end,
    S9 = case {PMsg, NMsg} of
	   {#{inserted_at := PFinserted_at},
	    #{inserted_at := NFinserted_at}} ->
	       S8#{inserted_at =>
		       merge_msg_timestamp(PFinserted_at, NFinserted_at,
					   TrUserData)};
	   {_, #{inserted_at := NFinserted_at}} ->
	       S8#{inserted_at => NFinserted_at};
	   {#{inserted_at := PFinserted_at}, _} ->
	       S8#{inserted_at => PFinserted_at};
	   {_, _} -> S8
	 end,
    case {PMsg, NMsg} of
      {_, #{ingest_id := NFingest_id}} ->
	  S9#{ingest_id => NFingest_id};
      {#{ingest_id := PFingest_id}, _} ->
	  S9#{ingest_id => PFingest_id};
      _ -> S9
    end.

-compile({nowarn_unused_function,merge_msg_struct/3}).
merge_msg_struct(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{fields := PFfields}, #{fields := NFfields}} ->
	  S1#{fields =>
		  'tr_merge_struct.fields'(PFfields, NFfields,
					   TrUserData)};
      {_, #{fields := NFfields}} -> S1#{fields => NFfields};
      {#{fields := PFfields}, _} -> S1#{fields => PFfields};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_value/3}).
merge_msg_value(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{kind := {struct_value, OPFkind}},
       #{kind := {struct_value, ONFkind}}} ->
	  S1#{kind =>
		  {struct_value,
		   merge_msg_struct(OPFkind, ONFkind, TrUserData)}};
      {#{kind := {list_value, OPFkind}},
       #{kind := {list_value, ONFkind}}} ->
	  S1#{kind =>
		  {list_value,
		   merge_msg_list_value(OPFkind, ONFkind, TrUserData)}};
      {_, #{kind := NFkind}} -> S1#{kind => NFkind};
      {#{kind := PFkind}, _} -> S1#{kind => PFkind};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_list_value/3}).
merge_msg_list_value(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{values := PFvalues}, #{values := NFvalues}} ->
	  S1#{values =>
		  'erlang_++'(PFvalues, NFvalues, TrUserData)};
      {_, #{values := NFvalues}} -> S1#{values => NFvalues};
      {#{values := PFvalues}, _} -> S1#{values => PFvalues};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_timestamp/3}).
merge_msg_timestamp(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{seconds := NFseconds}} ->
	       S1#{seconds => NFseconds};
	   {#{seconds := PFseconds}, _} ->
	       S1#{seconds => PFseconds};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{nanos := NFnanos}} -> S2#{nanos => NFnanos};
      {#{nanos := PFnanos}, _} -> S2#{nanos => PFnanos};
      _ -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      subscribe_request ->
	  v_msg_subscribe_request(Msg, [MsgName], TrUserData);
      replay_request ->
	  v_msg_replay_request(Msg, [MsgName], TrUserData);
      event -> v_msg_event(Msg, [MsgName], TrUserData);
      struct -> v_msg_struct(Msg, [MsgName], TrUserData);
      value -> v_msg_value(Msg, [MsgName], TrUserData);
      list_value ->
	  v_msg_list_value(Msg, [MsgName], TrUserData);
      timestamp ->
	  v_msg_timestamp(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_subscribe_request/3}).
-dialyzer({nowarn_function,v_msg_subscribe_request/3}).
v_msg_subscribe_request(#{} = M, Path, TrUserData) ->
    case M of
      #{topics := F1} ->
	  if is_list(F1) ->
		 _ = [v_type_string(Elem, [topics | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F1,
			       [topics | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (topics) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_subscribe_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   subscribe_request},
		  M, Path);
v_msg_subscribe_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, subscribe_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_replay_request/3}).
-dialyzer({nowarn_function,v_msg_replay_request/3}).
v_msg_replay_request(#{} = M, Path, TrUserData) ->
    case M of
      #{topics := F1} ->
	  if is_list(F1) ->
		 _ = [v_type_string(Elem, [topics | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, string}, F1,
			       [topics | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{'after' := F2} ->
	  v_type_uint64(F2, ['after' | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{limit := F3} ->
	  v_type_uint64(F3, [limit | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (topics) -> ok;
		      ('after') -> ok;
		      (limit) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_replay_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   replay_request},
		  M, Path);
v_msg_replay_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, replay_request}, X, Path).

-compile({nowarn_unused_function,v_msg_event/3}).
-dialyzer({nowarn_function,v_msg_event/3}).
v_msg_event(#{} = M, Path, TrUserData) ->
    case M of
      #{event_id := F1} ->
	  v_type_string(F1, [event_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{type := F2} ->
	  v_type_string(F2, [type | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{correlation := F3} ->
	  v_type_string(F3, [correlation | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{causation := F4} ->
	  v_type_string(F4, [causation | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{data := F5} ->
	  v_msg_value(F5, [data | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{metadata := F6} ->
	  v_msg_value(F6, [metadata | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{debug := F7} ->
	  v_type_bool(F7, [debug | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{inserted_at := F8} ->
	  v_msg_timestamp(F8, [inserted_at | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{ingest_id := F9} ->
	  v_type_string(F9, [ingest_id | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (event_id) -> ok;
		      (type) -> ok;
		      (correlation) -> ok;
		      (causation) -> ok;
		      (data) -> ok;
		      (metadata) -> ok;
		      (debug) -> ok;
		      (inserted_at) -> ok;
		      (ingest_id) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_event(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   event},
		  M, Path);
v_msg_event(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, event}, X, Path).

-compile({nowarn_unused_function,v_msg_struct/3}).
-dialyzer({nowarn_function,v_msg_struct/3}).
v_msg_struct(#{} = M, Path, TrUserData) ->
    case M of
      #{fields := F1} ->
	  'v_map<string,value>'(F1, [fields | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (fields) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_struct(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   struct},
		  M, Path);
v_msg_struct(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, struct}, X, Path).

-compile({nowarn_unused_function,v_msg_value/3}).
-dialyzer({nowarn_function,v_msg_value/3}).
v_msg_value(#{} = M, Path, TrUserData) ->
    case M of
      #{kind := {null_value, OF1}} ->
	  'v_enum_google.protobuf.NullValue'(OF1,
					     [null_value, kind | Path],
					     TrUserData);
      #{kind := {number_value, OF1}} ->
	  v_type_double(OF1, [number_value, kind | Path],
			TrUserData);
      #{kind := {string_value, OF1}} ->
	  v_type_string(OF1, [string_value, kind | Path],
			TrUserData);
      #{kind := {bool_value, OF1}} ->
	  v_type_bool(OF1, [bool_value, kind | Path], TrUserData);
      #{kind := {struct_value, OF1}} ->
	  v_msg_struct(OF1, [struct_value, kind | Path],
		       TrUserData);
      #{kind := {list_value, OF1}} ->
	  v_msg_list_value(OF1, [list_value, kind | Path],
			   TrUserData);
      #{kind := F1} ->
	  mk_type_error(invalid_oneof, F1, [kind | Path]);
      _ -> ok
    end,
    lists:foreach(fun (kind) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_value(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   value},
		  M, Path);
v_msg_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, value}, X, Path).

-compile({nowarn_unused_function,v_msg_list_value/3}).
-dialyzer({nowarn_function,v_msg_list_value/3}).
v_msg_list_value(#{} = M, Path, TrUserData) ->
    case M of
      #{values := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_value(Elem, [values | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, value}}, F1,
			       [values | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (values) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_list_value(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   list_value},
		  M, Path);
v_msg_list_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, list_value}, X, Path).

-compile({nowarn_unused_function,v_msg_timestamp/3}).
-dialyzer({nowarn_function,v_msg_timestamp/3}).
v_msg_timestamp(#{} = M, Path, TrUserData) ->
    case M of
      #{seconds := F1} ->
	  v_type_int64(F1, [seconds | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{nanos := F2} ->
	  v_type_int32(F2, [nanos | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (seconds) -> ok;
		      (nanos) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_timestamp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   timestamp},
		  M, Path);
v_msg_timestamp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, timestamp}, X, Path).

-compile({nowarn_unused_function,'v_enum_google.protobuf.NullValue'/3}).
-dialyzer({nowarn_function,'v_enum_google.protobuf.NullValue'/3}).
'v_enum_google.protobuf.NullValue'('NULL_VALUE', _Path,
				   _TrUserData) ->
    ok;
'v_enum_google.protobuf.NullValue'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_google.protobuf.NullValue'(X, Path,
				   _TrUserData) ->
    mk_type_error({invalid_enum,
		   'google.protobuf.NullValue'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<string,value>'/3}).
-dialyzer({nowarn_function,'v_map<string,value>'/3}).
'v_map<string,value>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_string(Key, [key | Path], TrUserData),
       v_msg_value(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,value>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_struct.fields'/2}).
'tr_decode_init_default_struct.fields'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_struct.fields'/3}).
'tr_merge_struct.fields'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_struct.fields'/2}).
'tr_decode_repeated_finalize_struct.fields'(L,
					    TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_struct.fields'/2}).
'tr_encode_struct.fields'(X, _) -> mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_struct.fields'/3}).
'tr_decode_repeated_add_elem_struct.fields'(Elem, L,
					    _) ->
    mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_encode_struct.fields[x]'/2}).
'tr_encode_struct.fields[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m_verify_value/2}).
mt_add_item_m_verify_value(#{key := K, value := V},
			   M) ->
    if V =:= '$undef' -> error({gpb_error, missing_value});
       true -> M#{K => V}
    end.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{enum, 'google.protobuf.NullValue'},
      [{'NULL_VALUE', 0}]},
     {{msg, subscribe_request},
      [#{name => topics, fnum => 1, rnum => 2, type => string,
	 occurrence => repeated, opts => []}]},
     {{msg, replay_request},
      [#{name => topics, fnum => 1, rnum => 2, type => string,
	 occurrence => repeated, opts => []},
       #{name => 'after', fnum => 2, rnum => 3, type => uint64,
	 occurrence => optional, opts => []},
       #{name => limit, fnum => 3, rnum => 4, type => uint64,
	 occurrence => optional, opts => []}]},
     {{msg, event},
      [#{name => event_id, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => type, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []},
       #{name => correlation, fnum => 3, rnum => 4,
	 type => string, occurrence => optional, opts => []},
       #{name => causation, fnum => 4, rnum => 5,
	 type => string, occurrence => optional, opts => []},
       #{name => data, fnum => 5, rnum => 6,
	 type => {msg, value}, occurrence => optional,
	 opts => []},
       #{name => metadata, fnum => 6, rnum => 7,
	 type => {msg, value}, occurrence => optional,
	 opts => []},
       #{name => debug, fnum => 7, rnum => 8, type => bool,
	 occurrence => optional, opts => []},
       #{name => inserted_at, fnum => 8, rnum => 9,
	 type => {msg, timestamp}, occurrence => optional,
	 opts => []},
       #{name => ingest_id, fnum => 9, rnum => 10,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, struct},
      [#{name => fields, fnum => 1, rnum => 2,
	 type => {map, string, {msg, value}},
	 occurrence => repeated, opts => []}]},
     {{msg, value},
      [#{name => kind, rnum => 2,
	 fields =>
	     [#{name => null_value, fnum => 1, rnum => 2,
		type => {enum, 'google.protobuf.NullValue'},
		occurrence => optional, opts => []},
	      #{name => number_value, fnum => 2, rnum => 2,
		type => double, occurrence => optional, opts => []},
	      #{name => string_value, fnum => 3, rnum => 2,
		type => string, occurrence => optional, opts => []},
	      #{name => bool_value, fnum => 4, rnum => 2,
		type => bool, occurrence => optional, opts => []},
	      #{name => struct_value, fnum => 5, rnum => 2,
		type => {msg, struct}, occurrence => optional,
		opts => []},
	      #{name => list_value, fnum => 6, rnum => 2,
		type => {msg, list_value}, occurrence => optional,
		opts => []}]}]},
     {{msg, list_value},
      [#{name => values, fnum => 1, rnum => 2,
	 type => {msg, value}, occurrence => repeated,
	 opts => []}]},
     {{msg, timestamp},
      [#{name => seconds, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => nanos, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]}].


get_msg_names() ->
    [subscribe_request, replay_request, event, struct,
     value, list_value, timestamp].


get_group_names() -> [].


get_msg_or_group_names() ->
    [subscribe_request, replay_request, event, struct,
     value, list_value, timestamp].


get_enum_names() -> ['google.protobuf.NullValue'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(subscribe_request) ->
    [#{name => topics, fnum => 1, rnum => 2, type => string,
       occurrence => repeated, opts => []}];
find_msg_def(replay_request) ->
    [#{name => topics, fnum => 1, rnum => 2, type => string,
       occurrence => repeated, opts => []},
     #{name => 'after', fnum => 2, rnum => 3, type => uint64,
       occurrence => optional, opts => []},
     #{name => limit, fnum => 3, rnum => 4, type => uint64,
       occurrence => optional, opts => []}];
find_msg_def(event) ->
    [#{name => event_id, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => type, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []},
     #{name => correlation, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []},
     #{name => causation, fnum => 4, rnum => 5,
       type => string, occurrence => optional, opts => []},
     #{name => data, fnum => 5, rnum => 6,
       type => {msg, value}, occurrence => optional,
       opts => []},
     #{name => metadata, fnum => 6, rnum => 7,
       type => {msg, value}, occurrence => optional,
       opts => []},
     #{name => debug, fnum => 7, rnum => 8, type => bool,
       occurrence => optional, opts => []},
     #{name => inserted_at, fnum => 8, rnum => 9,
       type => {msg, timestamp}, occurrence => optional,
       opts => []},
     #{name => ingest_id, fnum => 9, rnum => 10,
       type => string, occurrence => optional, opts => []}];
find_msg_def(struct) ->
    [#{name => fields, fnum => 1, rnum => 2,
       type => {map, string, {msg, value}},
       occurrence => repeated, opts => []}];
find_msg_def(value) ->
    [#{name => kind, rnum => 2,
       fields =>
	   [#{name => null_value, fnum => 1, rnum => 2,
	      type => {enum, 'google.protobuf.NullValue'},
	      occurrence => optional, opts => []},
	    #{name => number_value, fnum => 2, rnum => 2,
	      type => double, occurrence => optional, opts => []},
	    #{name => string_value, fnum => 3, rnum => 2,
	      type => string, occurrence => optional, opts => []},
	    #{name => bool_value, fnum => 4, rnum => 2,
	      type => bool, occurrence => optional, opts => []},
	    #{name => struct_value, fnum => 5, rnum => 2,
	      type => {msg, struct}, occurrence => optional,
	      opts => []},
	    #{name => list_value, fnum => 6, rnum => 2,
	      type => {msg, list_value}, occurrence => optional,
	      opts => []}]}];
find_msg_def(list_value) ->
    [#{name => values, fnum => 1, rnum => 2,
       type => {msg, value}, occurrence => repeated,
       opts => []}];
find_msg_def(timestamp) ->
    [#{name => seconds, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => nanos, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('google.protobuf.NullValue') ->
    [{'NULL_VALUE', 0}];
find_enum_def(_) -> error.


enum_symbol_by_value('google.protobuf.NullValue',
		     Value) ->
    'enum_symbol_by_value_google.protobuf.NullValue'(Value).


enum_value_by_symbol('google.protobuf.NullValue',
		     Sym) ->
    'enum_value_by_symbol_google.protobuf.NullValue'(Sym).


'enum_symbol_by_value_google.protobuf.NullValue'(0) ->
    'NULL_VALUE'.


'enum_value_by_symbol_google.protobuf.NullValue'('NULL_VALUE') ->
    0.


get_service_names() -> ['ibento.Ibento'].


get_service_def('ibento.Ibento') ->
    {{service, 'ibento.Ibento'},
     [#{name => 'Subscribe', input => subscribe_request,
	output => event, input_stream => false,
	output_stream => true, opts => []}]};
get_service_def(_) -> error.


get_rpc_names('ibento.Ibento') -> ['Subscribe'];
get_rpc_names(_) -> error.


find_rpc_def('ibento.Ibento', RpcName) ->
    'find_rpc_def_ibento.Ibento'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_ibento.Ibento'('Subscribe') ->
    #{name => 'Subscribe', input => subscribe_request,
      output => event, input_stream => false,
      output_stream => true, opts => []};
'find_rpc_def_ibento.Ibento'(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"ibento.Ibento">>) -> 'ibento.Ibento';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('ibento.Ibento') -> <<"ibento.Ibento">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"ibento.Ibento">>, <<"Subscribe">>) ->
    {'ibento.Ibento', 'Subscribe'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('ibento.Ibento',
			       'Subscribe') ->
    {<<"ibento.Ibento">>, <<"Subscribe">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"ibento.SubscribeRequest">>) -> subscribe_request;
fqbin_to_msg_name(<<"ibento.ReplayRequest">>) -> replay_request;
fqbin_to_msg_name(<<"ibento.Event">>) -> event;
fqbin_to_msg_name(<<"google.protobuf.Struct">>) -> struct;
fqbin_to_msg_name(<<"google.protobuf.Value">>) -> value;
fqbin_to_msg_name(<<"google.protobuf.ListValue">>) -> list_value;
fqbin_to_msg_name(<<"google.protobuf.Timestamp">>) -> timestamp;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(subscribe_request) -> <<"ibento.SubscribeRequest">>;
msg_name_to_fqbin(replay_request) -> <<"ibento.ReplayRequest">>;
msg_name_to_fqbin(event) -> <<"ibento.Event">>;
msg_name_to_fqbin(struct) -> <<"google.protobuf.Struct">>;
msg_name_to_fqbin(value) -> <<"google.protobuf.Value">>;
msg_name_to_fqbin(list_value) -> <<"google.protobuf.ListValue">>;
msg_name_to_fqbin(timestamp) -> <<"google.protobuf.Timestamp">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"google.protobuf.NullValue">>) ->
    'google.protobuf.NullValue';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('google.protobuf.NullValue') ->
    <<"google.protobuf.NullValue">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> ibento.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "ibento.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["ibento.proto", "struct.proto", "timestamp.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() ->
    ["ibento", "struct", "timestamp"].


get_msg_containment("ibento") ->
    [event, replay_request, subscribe_request];
get_msg_containment("struct") ->
    [list_value, struct, value];
get_msg_containment("timestamp") -> [timestamp];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("ibento") -> ibento;
get_pkg_containment("struct") -> 'google.protobuf';
get_pkg_containment("timestamp") -> 'google.protobuf';
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("ibento") -> ['ibento.Ibento'];
get_service_containment("struct") -> [];
get_service_containment("timestamp") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("ibento") ->
    [{'ibento.Ibento', 'Subscribe'}];
get_rpc_containment("struct") -> [];
get_rpc_containment("timestamp") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("ibento") -> [];
get_enum_containment("struct") ->
    ['google.protobuf.NullValue'];
get_enum_containment("timestamp") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Timestamp">>) -> "timestamp";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Struct">>) -> "struct";
get_proto_by_msg_name_as_fqbin(<<"ibento.SubscribeRequest">>) -> "ibento";
get_proto_by_msg_name_as_fqbin(<<"ibento.ReplayRequest">>) -> "ibento";
get_proto_by_msg_name_as_fqbin(<<"ibento.Event">>) -> "ibento";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Value">>) -> "struct";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.ListValue">>) -> "struct";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"ibento.Ibento">>) -> "ibento";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"google.protobuf.NullValue">>) -> "struct";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) ->
    ["struct", "timestamp"];
get_protos_by_pkg_name_as_fqbin(<<"ibento">>) -> ["ibento"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).


descriptor() ->
    <<10, 193, 3, 10, 19, 105, 98, 101, 110, 116, 111, 47,
      105, 98, 101, 110, 116, 111, 46, 112, 114, 111, 116,
      111, 18, 6, 105, 98, 101, 110, 116, 111, 34, 242, 1, 10,
      5, 69, 118, 101, 110, 116, 18, 16, 10, 8, 101, 118, 101,
      110, 116, 95, 105, 100, 24, 1, 32, 1, 40, 9, 18, 12, 10,
      4, 116, 121, 112, 101, 24, 2, 32, 1, 40, 9, 18, 19, 10,
      11, 99, 111, 114, 114, 101, 108, 97, 116, 105, 111, 110,
      24, 3, 32, 1, 40, 9, 18, 17, 10, 9, 99, 97, 117, 115,
      97, 116, 105, 111, 110, 24, 4, 32, 1, 40, 9, 18, 36, 10,
      4, 100, 97, 116, 97, 24, 5, 32, 1, 40, 11, 50, 22, 46,
      103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116,
      111, 98, 117, 102, 46, 86, 97, 108, 117, 101, 18, 40,
      10, 8, 109, 101, 116, 97, 100, 97, 116, 97, 24, 6, 32,
      1, 40, 11, 50, 22, 46, 103, 111, 111, 103, 108, 101, 46,
      112, 114, 111, 116, 111, 98, 117, 102, 46, 86, 97, 108,
      117, 101, 18, 13, 10, 5, 100, 101, 98, 117, 103, 24, 7,
      32, 1, 40, 8, 18, 47, 10, 11, 105, 110, 115, 101, 114,
      116, 101, 100, 95, 97, 116, 24, 8, 32, 1, 40, 11, 50,
      26, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111,
      116, 111, 98, 117, 102, 46, 84, 105, 109, 101, 115, 116,
      97, 109, 112, 18, 17, 10, 9, 105, 110, 103, 101, 115,
      116, 95, 105, 100, 24, 9, 32, 1, 40, 9, 34, 61, 10, 13,
      82, 101, 112, 108, 97, 121, 82, 101, 113, 117, 101, 115,
      116, 18, 14, 10, 6, 116, 111, 112, 105, 99, 115, 24, 1,
      32, 3, 40, 9, 18, 13, 10, 5, 97, 102, 116, 101, 114, 24,
      2, 32, 1, 40, 4, 18, 13, 10, 5, 108, 105, 109, 105, 116,
      24, 3, 32, 1, 40, 4, 34, 34, 10, 16, 83, 117, 98, 115,
      99, 114, 105, 98, 101, 82, 101, 113, 117, 101, 115, 116,
      18, 14, 10, 6, 116, 111, 112, 105, 99, 115, 24, 1, 32,
      3, 40, 9, 50, 66, 10, 6, 73, 98, 101, 110, 116, 111, 18,
      56, 10, 9, 83, 117, 98, 115, 99, 114, 105, 98, 101, 18,
      24, 46, 105, 98, 101, 110, 116, 111, 46, 83, 117, 98,
      115, 99, 114, 105, 98, 101, 82, 101, 113, 117, 101, 115,
      116, 26, 13, 46, 105, 98, 101, 110, 116, 111, 46, 69,
      118, 101, 110, 116, 40, 0, 48, 0, 98, 6, 112, 114, 111,
      116, 111, 51, 10, 135, 4, 10, 28, 103, 111, 111, 103,
      108, 101, 47, 112, 114, 111, 116, 111, 98, 117, 102, 47,
      115, 116, 114, 117, 99, 116, 46, 112, 114, 111, 116,
      111, 18, 15, 103, 111, 111, 103, 108, 101, 46, 112, 114,
      111, 116, 111, 98, 117, 102, 34, 51, 10, 9, 76, 105,
      115, 116, 86, 97, 108, 117, 101, 18, 38, 10, 6, 118, 97,
      108, 117, 101, 115, 24, 1, 32, 3, 40, 11, 50, 22, 46,
      103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116,
      111, 98, 117, 102, 46, 86, 97, 108, 117, 101, 34, 60,
      10, 6, 83, 116, 114, 117, 99, 116, 18, 50, 10, 6, 102,
      105, 101, 108, 100, 115, 24, 1, 32, 3, 40, 11, 50, 34,
      46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111,
      116, 111, 98, 117, 102, 46, 77, 97, 112, 70, 105, 101,
      108, 100, 69, 110, 116, 114, 121, 95, 49, 95, 49, 34,
      234, 1, 10, 5, 86, 97, 108, 117, 101, 18, 48, 10, 10,
      110, 117, 108, 108, 95, 118, 97, 108, 117, 101, 24, 1,
      32, 1, 40, 14, 50, 26, 46, 103, 111, 111, 103, 108, 101,
      46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 78, 117,
      108, 108, 86, 97, 108, 117, 101, 72, 0, 18, 22, 10, 12,
      110, 117, 109, 98, 101, 114, 95, 118, 97, 108, 117, 101,
      24, 2, 32, 1, 40, 1, 72, 0, 18, 22, 10, 12, 115, 116,
      114, 105, 110, 103, 95, 118, 97, 108, 117, 101, 24, 3,
      32, 1, 40, 9, 72, 0, 18, 20, 10, 10, 98, 111, 111, 108,
      95, 118, 97, 108, 117, 101, 24, 4, 32, 1, 40, 8, 72, 0,
      18, 47, 10, 12, 115, 116, 114, 117, 99, 116, 95, 118,
      97, 108, 117, 101, 24, 5, 32, 1, 40, 11, 50, 23, 46,
      103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116,
      111, 98, 117, 102, 46, 83, 116, 114, 117, 99, 116, 72,
      0, 18, 48, 10, 10, 108, 105, 115, 116, 95, 118, 97, 108,
      117, 101, 24, 6, 32, 1, 40, 11, 50, 26, 46, 103, 111,
      111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98,
      117, 102, 46, 76, 105, 115, 116, 86, 97, 108, 117, 101,
      72, 0, 66, 6, 10, 4, 107, 105, 110, 100, 34, 81, 10, 17,
      77, 97, 112, 70, 105, 101, 108, 100, 69, 110, 116, 114,
      121, 95, 49, 95, 49, 18, 11, 10, 3, 107, 101, 121, 24,
      1, 32, 2, 40, 9, 18, 37, 10, 5, 118, 97, 108, 117, 101,
      24, 2, 32, 2, 40, 11, 50, 22, 46, 103, 111, 111, 103,
      108, 101, 46, 112, 114, 111, 116, 111, 98, 117, 102, 46,
      86, 97, 108, 117, 101, 58, 8, 8, 0, 16, 0, 24, 0, 56, 1,
      42, 27, 10, 9, 78, 117, 108, 108, 86, 97, 108, 117, 101,
      18, 14, 10, 10, 78, 85, 76, 76, 95, 86, 65, 76, 85, 69,
      16, 0, 98, 6, 112, 114, 111, 116, 111, 51, 10, 103, 10,
      31, 103, 111, 111, 103, 108, 101, 47, 112, 114, 111,
      116, 111, 98, 117, 102, 47, 116, 105, 109, 101, 115,
      116, 97, 109, 112, 46, 112, 114, 111, 116, 111, 18, 15,
      103, 111, 111, 103, 108, 101, 46, 112, 114, 111, 116,
      111, 98, 117, 102, 34, 43, 10, 9, 84, 105, 109, 101,
      115, 116, 97, 109, 112, 18, 15, 10, 7, 115, 101, 99,
      111, 110, 100, 115, 24, 1, 32, 1, 40, 3, 18, 13, 10, 5,
      110, 97, 110, 111, 115, 24, 2, 32, 1, 40, 5, 98, 6, 112,
      114, 111, 116, 111, 51>>.

descriptor("ibento") ->
    <<10, 19, 105, 98, 101, 110, 116, 111, 47, 105, 98, 101,
      110, 116, 111, 46, 112, 114, 111, 116, 111, 18, 6, 105,
      98, 101, 110, 116, 111, 34, 242, 1, 10, 5, 69, 118, 101,
      110, 116, 18, 16, 10, 8, 101, 118, 101, 110, 116, 95,
      105, 100, 24, 1, 32, 1, 40, 9, 18, 12, 10, 4, 116, 121,
      112, 101, 24, 2, 32, 1, 40, 9, 18, 19, 10, 11, 99, 111,
      114, 114, 101, 108, 97, 116, 105, 111, 110, 24, 3, 32,
      1, 40, 9, 18, 17, 10, 9, 99, 97, 117, 115, 97, 116, 105,
      111, 110, 24, 4, 32, 1, 40, 9, 18, 36, 10, 4, 100, 97,
      116, 97, 24, 5, 32, 1, 40, 11, 50, 22, 46, 103, 111,
      111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98,
      117, 102, 46, 86, 97, 108, 117, 101, 18, 40, 10, 8, 109,
      101, 116, 97, 100, 97, 116, 97, 24, 6, 32, 1, 40, 11,
      50, 22, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114,
      111, 116, 111, 98, 117, 102, 46, 86, 97, 108, 117, 101,
      18, 13, 10, 5, 100, 101, 98, 117, 103, 24, 7, 32, 1, 40,
      8, 18, 47, 10, 11, 105, 110, 115, 101, 114, 116, 101,
      100, 95, 97, 116, 24, 8, 32, 1, 40, 11, 50, 26, 46, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 46, 84, 105, 109, 101, 115, 116, 97, 109,
      112, 18, 17, 10, 9, 105, 110, 103, 101, 115, 116, 95,
      105, 100, 24, 9, 32, 1, 40, 9, 34, 61, 10, 13, 82, 101,
      112, 108, 97, 121, 82, 101, 113, 117, 101, 115, 116, 18,
      14, 10, 6, 116, 111, 112, 105, 99, 115, 24, 1, 32, 3,
      40, 9, 18, 13, 10, 5, 97, 102, 116, 101, 114, 24, 2, 32,
      1, 40, 4, 18, 13, 10, 5, 108, 105, 109, 105, 116, 24, 3,
      32, 1, 40, 4, 34, 34, 10, 16, 83, 117, 98, 115, 99, 114,
      105, 98, 101, 82, 101, 113, 117, 101, 115, 116, 18, 14,
      10, 6, 116, 111, 112, 105, 99, 115, 24, 1, 32, 3, 40, 9,
      50, 66, 10, 6, 73, 98, 101, 110, 116, 111, 18, 56, 10,
      9, 83, 117, 98, 115, 99, 114, 105, 98, 101, 18, 24, 46,
      105, 98, 101, 110, 116, 111, 46, 83, 117, 98, 115, 99,
      114, 105, 98, 101, 82, 101, 113, 117, 101, 115, 116, 26,
      13, 46, 105, 98, 101, 110, 116, 111, 46, 69, 118, 101,
      110, 116, 40, 0, 48, 0, 98, 6, 112, 114, 111, 116, 111,
      51>>;
descriptor("struct") ->
    <<10, 28, 103, 111, 111, 103, 108, 101, 47, 112, 114,
      111, 116, 111, 98, 117, 102, 47, 115, 116, 114, 117, 99,
      116, 46, 112, 114, 111, 116, 111, 18, 15, 103, 111, 111,
      103, 108, 101, 46, 112, 114, 111, 116, 111, 98, 117,
      102, 34, 51, 10, 9, 76, 105, 115, 116, 86, 97, 108, 117,
      101, 18, 38, 10, 6, 118, 97, 108, 117, 101, 115, 24, 1,
      32, 3, 40, 11, 50, 22, 46, 103, 111, 111, 103, 108, 101,
      46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 86, 97,
      108, 117, 101, 34, 60, 10, 6, 83, 116, 114, 117, 99,
      116, 18, 50, 10, 6, 102, 105, 101, 108, 100, 115, 24, 1,
      32, 3, 40, 11, 50, 34, 46, 103, 111, 111, 103, 108, 101,
      46, 112, 114, 111, 116, 111, 98, 117, 102, 46, 77, 97,
      112, 70, 105, 101, 108, 100, 69, 110, 116, 114, 121, 95,
      49, 95, 49, 34, 234, 1, 10, 5, 86, 97, 108, 117, 101,
      18, 48, 10, 10, 110, 117, 108, 108, 95, 118, 97, 108,
      117, 101, 24, 1, 32, 1, 40, 14, 50, 26, 46, 103, 111,
      111, 103, 108, 101, 46, 112, 114, 111, 116, 111, 98,
      117, 102, 46, 78, 117, 108, 108, 86, 97, 108, 117, 101,
      72, 0, 18, 22, 10, 12, 110, 117, 109, 98, 101, 114, 95,
      118, 97, 108, 117, 101, 24, 2, 32, 1, 40, 1, 72, 0, 18,
      22, 10, 12, 115, 116, 114, 105, 110, 103, 95, 118, 97,
      108, 117, 101, 24, 3, 32, 1, 40, 9, 72, 0, 18, 20, 10,
      10, 98, 111, 111, 108, 95, 118, 97, 108, 117, 101, 24,
      4, 32, 1, 40, 8, 72, 0, 18, 47, 10, 12, 115, 116, 114,
      117, 99, 116, 95, 118, 97, 108, 117, 101, 24, 5, 32, 1,
      40, 11, 50, 23, 46, 103, 111, 111, 103, 108, 101, 46,
      112, 114, 111, 116, 111, 98, 117, 102, 46, 83, 116, 114,
      117, 99, 116, 72, 0, 18, 48, 10, 10, 108, 105, 115, 116,
      95, 118, 97, 108, 117, 101, 24, 6, 32, 1, 40, 11, 50,
      26, 46, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111,
      116, 111, 98, 117, 102, 46, 76, 105, 115, 116, 86, 97,
      108, 117, 101, 72, 0, 66, 6, 10, 4, 107, 105, 110, 100,
      34, 81, 10, 17, 77, 97, 112, 70, 105, 101, 108, 100, 69,
      110, 116, 114, 121, 95, 49, 95, 49, 18, 11, 10, 3, 107,
      101, 121, 24, 1, 32, 2, 40, 9, 18, 37, 10, 5, 118, 97,
      108, 117, 101, 24, 2, 32, 2, 40, 11, 50, 22, 46, 103,
      111, 111, 103, 108, 101, 46, 112, 114, 111, 116, 111,
      98, 117, 102, 46, 86, 97, 108, 117, 101, 58, 8, 8, 0,
      16, 0, 24, 0, 56, 1, 42, 27, 10, 9, 78, 117, 108, 108,
      86, 97, 108, 117, 101, 18, 14, 10, 10, 78, 85, 76, 76,
      95, 86, 65, 76, 85, 69, 16, 0, 98, 6, 112, 114, 111,
      116, 111, 51>>;
descriptor("timestamp") ->
    <<10, 31, 103, 111, 111, 103, 108, 101, 47, 112, 114,
      111, 116, 111, 98, 117, 102, 47, 116, 105, 109, 101,
      115, 116, 97, 109, 112, 46, 112, 114, 111, 116, 111, 18,
      15, 103, 111, 111, 103, 108, 101, 46, 112, 114, 111,
      116, 111, 98, 117, 102, 34, 43, 10, 9, 84, 105, 109,
      101, 115, 116, 97, 109, 112, 18, 15, 10, 7, 115, 101,
      99, 111, 110, 100, 115, 24, 1, 32, 1, 40, 3, 18, 13, 10,
      5, 110, 97, 110, 111, 115, 24, 2, 32, 1, 40, 5, 98, 6,
      112, 114, 111, 116, 111, 51>>;
descriptor(X) -> error({gpb_error, {badname, X}}).


gpb_version_as_string() ->
    "4.7.2".

gpb_version_as_list() ->
    [4,7,2].
